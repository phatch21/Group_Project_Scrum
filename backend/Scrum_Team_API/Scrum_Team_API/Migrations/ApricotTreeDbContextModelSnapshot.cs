// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scrum_Team_API.Models;

#nullable disable

namespace Scrum_Team_API.Migrations
{
    [DbContext(typeof(ApricotTreeDbContext))]
    partial class ApricotTreeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Scrum_Team_API.Models.AiIdea", b =>
                {
                    b.Property<int>("SuggestId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SuggestID");

                    b.Property<bool?>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GeneratedText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeID");

                    b.HasKey("SuggestId");

                    b.HasIndex("TypeId");

                    b.ToTable("AI_IDEAS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Frequency", b =>
                {
                    b.Property<int>("FreqId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FreqID");

                    b.Property<string>("FreqDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FreqId");

                    b.HasIndex(new[] { "FreqDesc" }, "IX_FREQUENCY_FreqDesc")
                        .IsUnique();

                    b.ToTable("FREQUENCY", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Friend", b =>
                {
                    b.Property<int>("FriendshipId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FriendshipID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Fstatus")
                        .HasColumnType("TEXT")
                        .HasColumnName("FStatus");

                    b.Property<int>("UserId1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID1");

                    b.Property<int>("UserId2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID2");

                    b.HasKey("FriendshipId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("FRIENDS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("GoalID");

                    b.Property<DateTime?>("FinDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FInDate");

                    b.Property<int>("FreqId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FreqID");

                    b.Property<string>("Gdescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("GDescription");

                    b.Property<string>("Gname")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("GName");

                    b.Property<bool?>("GoalComp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<int?>("SuggestId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SuggestID");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeID");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("GoalId");

                    b.HasIndex("FreqId");

                    b.HasIndex("SuggestId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("GOALS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.GoalType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TypeId");

                    b.HasIndex(new[] { "TypeName" }, "IX_GOAL_TYPE_TypeName")
                        .IsUnique();

                    b.ToTable("GOAL_TYPE", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.GraphUser", b =>
                {
                    b.Property<int>("Ugid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UGID");

                    b.Property<DateTime?>("DatePlaced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GraphId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GraphID");

                    b.Property<int?>("LayerOrder")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double?>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Ugid");

                    b.HasIndex("GraphId");

                    b.HasIndex("UserId");

                    b.ToTable("GRAPH_USER", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Graphic", b =>
                {
                    b.Property<int>("GraphId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GraphID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GraphId");

                    b.ToTable("GRAPHICS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Journal", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EntryID");

                    b.Property<string>("EntryDesc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("EntryId");

                    b.HasIndex("UserId");

                    b.ToTable("JOURNALS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "IX_USERS_Email")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Scrum_Team_API.Models.AiIdea", b =>
                {
                    b.HasOne("Scrum_Team_API.Models.GoalType", "Type")
                        .WithMany("AiIdeas")
                        .HasForeignKey("TypeId")
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Friend", b =>
                {
                    b.HasOne("Scrum_Team_API.Models.User", "UserId1Navigation")
                        .WithMany("FriendUserId1Navigations")
                        .HasForeignKey("UserId1")
                        .IsRequired();

                    b.HasOne("Scrum_Team_API.Models.User", "UserId2Navigation")
                        .WithMany("FriendUserId2Navigations")
                        .HasForeignKey("UserId2")
                        .IsRequired();

                    b.Navigation("UserId1Navigation");

                    b.Navigation("UserId2Navigation");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Goal", b =>
                {
                    b.HasOne("Scrum_Team_API.Models.Frequency", "Freq")
                        .WithMany("Goals")
                        .HasForeignKey("FreqId")
                        .IsRequired();

                    b.HasOne("Scrum_Team_API.Models.AiIdea", "Suggest")
                        .WithMany("Goals")
                        .HasForeignKey("SuggestId");

                    b.HasOne("Scrum_Team_API.Models.GoalType", "Type")
                        .WithMany("Goals")
                        .HasForeignKey("TypeId")
                        .IsRequired();

                    b.HasOne("Scrum_Team_API.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Freq");

                    b.Navigation("Suggest");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.GraphUser", b =>
                {
                    b.HasOne("Scrum_Team_API.Models.Graphic", "Graph")
                        .WithMany("GraphUsers")
                        .HasForeignKey("GraphId")
                        .IsRequired();

                    b.HasOne("Scrum_Team_API.Models.User", "User")
                        .WithMany("GraphUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Graph");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Journal", b =>
                {
                    b.HasOne("Scrum_Team_API.Models.User", "User")
                        .WithMany("Journals")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.AiIdea", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Frequency", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.GoalType", b =>
                {
                    b.Navigation("AiIdeas");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.Graphic", b =>
                {
                    b.Navigation("GraphUsers");
                });

            modelBuilder.Entity("Scrum_Team_API.Models.User", b =>
                {
                    b.Navigation("FriendUserId1Navigations");

                    b.Navigation("FriendUserId2Navigations");

                    b.Navigation("Goals");

                    b.Navigation("GraphUsers");

                    b.Navigation("Journals");
                });
#pragma warning restore 612, 618
        }
    }
}
